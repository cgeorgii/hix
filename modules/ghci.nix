{
  lib,
  config,
  util,
  ...
}:
with builtins;
with lib;
let

  pkgs = config.pkgs;

  # TODO remove
  cwdScript = cwd:
  optionalString (cwd != null) ''
    :cd ${cwd}
  '';

  cli = config.internal.hixCli.exe;

in {

  options.ghci = with types; {

    setup = mkOption {
      description = "";
      type = attrsOf str;
    };

    run = mkOption {
      description = "";
      type = attrsOf str;
    };

    args = mkOption {
      type = listOf str;
      description = mdDoc ''
        The command line arguments passed to GHCi.
        Setting this option appends to the defaults, so in order to replace them, use `mkForce`.
        To only override basic GHC options like `-Werror`, use `ghci.ghcOptions`.
      '';
    };

    ghcOptions = mkOption {
      type = listOf str;
      description = mdDoc ''
        Command line arguments passed to GHCi that aren't related to more complex Hix config like the preprocessor.

        This option is initialized with values that use the Nix setting `cores` to set the number of
        threads GHCi should use. If you want to control this yourself, use `mkForce` here.
      '';
      default = [];
    };

    preprocessor = mkOption {
      description = mdDoc ''
        The preprocessor script used to insert extensions and a custom Prelude into source files.
        This is generated by Hix, but may be overridden.
      '';
      type = path;
    };

    cores = mkOption {
      description = "Cores";
      type = either int str;
      default = ''''${NIX_BUILD_CORES-}'';
    };

  };

  config.ghci = {

    setup = {
      hedgehog-property = "import Hedgehog (check)";
      hedgehog-unit = "import Hedgehog (check, property, test, withTests)";
      tasty-tree = "import Test.Tasty (defaultMain)";
    };

    run = {
      hedgehog-property = "check";
      hedgehog-unit = "check . withTests 1 . property . test";
      tasty-tree = "defaultMain";
    };

    ghcOptions = ["-j${toString config.ghci.cores}" "+RTS -A64M -RTS"];

    preprocessor = mkDefault (
      pkgs.writeScript "ghci-preprocessor" ''
      #!${pkgs.bash}/bin/bash
      ${cli} preproc --source "$1" --in "$2" --out "$3"
      ''
    );

    args = config.ghci.ghcOptions ++ ["-F" "-pgmF" (toString config.ghci.preprocessor)];
  };

  config.commands.ghci = {

    command = ''
    config=$(cat ${util.json.ghciFile})
    ghci_cmd=$(${cli} ghci-cmd -c "$config" ''${env_args[@]} ''${cmd_args[@]})
    env_run "eval $ghci_cmd"
    '';

    component = true;

  };
}
